#!/bin/bash

set -e
set -u

VERSION=0
OUT_SUFFIX='_resized'
DEFAULT_MAX_DIM=480

# Parse command line arguments

ME=$( basename "$0" )

USAGE_LINE="${ME} [-h | --help | OPTIONS] [<input file>]"

usage() {

	echo "usage: $USAGE_LINE" 1>&2
	exit 1

}

help() {

	cat <<-__eod__
		$USAGE_LINE

		Resize an image to medium quality for web publication

		Options:
		  -h, --help          This help text.
		  -o, --output FILE   Output file.
		  -m, --maximum DIM   Use DIM as maximum dimension in pixels.
		  -v, --version       Version information.

		Output file name is the same as input with '${OUT_SUFFIX}' appended.
		If input file is '-' or absent, reads from stdin and writes to stdout.
		If output file is '-', writes to stdout.

		DIM defaults to $DEFAULT_MAX_DIM pixels.

		This script requires ImageMagick <www.imagemagick.org> tools.

		Please file bug reports to:
		http://github.com/coolparadox/watermark/issues
	__eod__
	exit 0

}

version() {
	cat <<-__eod__
		${ME} version $VERSION
		
		Copyright (C) 2016  www.coolparadox.com
		License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
		This program comes with ABSOLUTELY NO WARRANTY.
		This is free software, and you are welcome to redistribute it
		under certain conditions; see License for details.
	__eod__
	exit 0
}

fail() {
	echo "${ME}: error: $*" 1>&2
	exit 1
}

INPUT_FILE='-'
OUTPUT_FILE=''
MAX_DIM=$DEFAULT_MAX_DIM
while test $# -gt 0 ; do
	OPT=$1
	case $OPT in

	-h|--help) help ;;

	-v|--version) version ;;

	-m|--maximum)
		shift
		test $# -gt 0 || fail "missing maximum dimension"
		MAX_DIM=$1
		shift
		;;

	-m=*)
		MAX_DIM=${OPT#-m=}
		shift
		;;

	--maximum=*)
		MAX_DIM=${OPT#--maximum=}
		shift
		;;

	-o|--output)
		shift
		test $# -gt 0 || fail "missing output file name"
		OUTPUT_FILE=$1
		shift
		;;

	-o=*)
		OUTPUT_FILE=${OPT#-o=}
		shift
		;;

	--output=*)
		OUTPUT_FILE=${OPT#--output=}
		shift
		;;

	-) break ;;

	-*) usage ;;

	*) break ;;

	esac
done
test $# -eq 0 || {
	INPUT_FILE="$1"
	test -n "$INPUT_FILE" || fail "missing input file"
	shift
}
test $# -eq 0 || fail "too many arguments"

test "$INPUT_FILE" != '-' || INPUT_FILE=''
test -z "$INPUT_FILE" -o -n "$OUTPUT_FILE" || {
	OUTPUT_DIR=$( dirname "$INPUT_FILE" )
	OUTPUT_BASE=$( basename "$INPUT_FILE" )
	OUTPUT_NAME=${OUTPUT_BASE/.*/}
	OUTPUT_EXTENSION=${OUTPUT_BASE/*\./.}
	test "$OUTPUT_NAME" != "$OUTPUT_EXTENSION" || OUTPUT_EXTENSION=''
	OUTPUT_FILE="$OUTPUT_DIR/${OUTPUT_NAME}${OUT_SUFFIX}${OUTPUT_EXTENSION}"
}
test "$OUTPUT_FILE" != '-' || OUTPUT_FILE=''
RM_IN=''
test -n "$INPUT_FILE" || {
	INPUT_FILE=$( mktemp )
	RM_IN="rm -f $INPUT_FILE"
	cat 1>$INPUT_FILE
}
RM_OUT=''
CAT_OUT=''
test -n "$OUTPUT_FILE" || {
	OUTPUT_FILE=$( mktemp )
	RM_OUT="rm -f $OUTPUT_FILE"
	CAT_OUT="cat $OUTPUT_FILE"
}

# Generate resized image

SOURCE_W=$( identify -format '%w' $INPUT_FILE )
SOURCE_H=$( identify -format '%h' $INPUT_FILE )
SOURCE_DIM=$SOURCE_W
test $SOURCE_H -le $SOURCE_DIM || SOURCE_DIM=$SOURCE_H
FACTOR=100
test $SOURCE_DIM -le $MAX_DIM || FACTOR=$((100 * MAX_DIM / SOURCE_DIM))
convert \
	$INPUT_FILE \
	-resize ${FACTOR}% \
	$OUTPUT_FILE
$RM_IN
$CAT_OUT
$RM_OUT

